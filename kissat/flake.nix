{
  description = "CaDiCaL flake";
  inputs.nixpkgs.url = "github:NixOS/nixpkgs";

  outputs = { self, nixpkgs }:
  {
    packages = builtins.listToAttrs (
      map
        (
          system: with import nixpkgs { inherit system; }; {
            name = system;
            value = {
              default = stdenv.mkDerivation rec {
                pname = "kissat";
                version = "4.0.3";
                src = fetchFromGitHub {
                 owner = "arminbiere";
                  repo = "kissat";
                  rev = "rel-${version}";
                  # rev = "abfa45fb782fa3b7c6e2eb6b939febe74d7270b7";
                  sha256 = "IlMHtsEYafpbCNZfbeJo1JS5S5qcZQt1aDWjv+xxoqM=";
                };
                outputs = [ "out" "dev" "lib" ];
                checkInputs = [ drat-trim p7zip ];
                # 'make test' assumes that /etc/passwd is not writable.
                patches = [ ./writable-passwd-is-ok.patch ];

                # the configure script is not generated by autotools and does not accept the
                # arguments that the default configurePhase passes like --prefix and --libdir
                dontAddPrefix = true;
                setOutputFlags = false;
                doCheck = true;

                installPhase = ''
                  runHook preInstall

                  install -Dm0755 build/kissat "$out/bin/kissat"
                  install -Dm0644 src/kissat.h "$dev/include/kissat.h"
                  install -Dm0644 build/libkissat.a "$lib/lib/libkissat.a"
                  mkdir -p "$out/share/doc/kissat/"
                  install -Dm0644 {LICEN?E,README*,VERSION} "$out/share/doc/kissat/"

                  runHook postInstall
                '';

                meta = with lib; {
                  description = "A 'keep it simple and clean bare metal SAT solver' written in C";
                  longDescription = ''
                    Kissat is a "keep it simple and clean bare metal SAT solver" written in C.
                    It is a port of CaDiCaL back to C with improved data structures,
                    better scheduling of inprocessing and optimized algorithms and implementation.
                  '';
                  maintainers = with maintainers; [ shnarazk ];
                  platforms = platforms.unix;
                  license = licenses.mit;
                  homepage = "http://fmv.jku.at/kissat";
                };
              };
            };
          }
        )
        [
          "x86_64-linux"
          "aarch64-linux"
          "x86_64-darwin"
          "aarch64-darwin"
        ]
    );
  };
}

